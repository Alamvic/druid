"
Implements a basic interpreter to compiler.

- All the generated bytecodes or primitives are unimplemented.
- No error handling.

This enables to build a VM which includes the JIT, but does not know how to JIT any method. Then the primitives or bytecodes could be added incrementally, and provides a baseline to compare performance between implementations.



"
Class {
	#name : #DRInterpreterCompiler,
	#superclass : #DRAbstractCompilerBuilder,
	#instVars : [
		'memory',
		'compilerCompilerClass',
		'interpreter',
		'compilerCompiler',
		'interpreterBuilder'
	],
	#category : #'Druid-InterpreterBuilder'
}

{ #category : #examples }
DRInterpreterCompiler class >> examplePrimitivesCollector [
	<example>

	| primCollector |

	StackInterpreter initializePrimitiveTable.
	primCollector := (DRInterpreterCompiler
			fromInterpreter: (DRDummyInterpreter new primitives: StackInterpreter primitiveTable)
			compilerClass: DRPrimitiveCompilerCompilerCollector)
				collectPrimitives.
	primCollector failedPrimitives inspect
]

{ #category : #examples }
DRInterpreterCompiler class >> examplePrimitivesFromCollection [
	<example>
	
	^ (DRInterpreterCompiler 
			fromInterpreter: (DRDummyInterpreter new primitives: #(#primitiveAdd)))
				primitives inspect
]

{ #category : #examples }
DRInterpreterCompiler class >> examplePrimitivesFromInterpreterBuilderClass [
	<example>
	
	^ (DRInterpreterCompiler 
			fromInterpreter: DRInterpreterBuilder new)
				primitives inspect
]

{ #category : #'instance creation' }
DRInterpreterCompiler class >> fromInterpreter: anInterpreterBuilder [ 

	^  self basicNew
		interpreterBuilder: anInterpreterBuilder;
		initialize;
		yourself
]

{ #category : #'instance creation' }
DRInterpreterCompiler class >> fromInterpreter: anInterpreterBuilder compilerClass: aCompilerClass [

	^ self basicNew
		compilerCompilerClass: aCompilerClass;
		interpreterBuilder: anInterpreterBuilder;
		initialize;
		yourself
]

{ #category : #'accessing - primitives' }
DRInterpreterCompiler >> collectPrimitives [
	"Trace receiver's interpreter primitives and collect compilation results.
	See implementors of #handlePrimitiveCompilationFor: "

	self generateBuildModel primitives.
	^ self compilerCompiler
]

{ #category : #accessing }
DRInterpreterCompiler >> compilationUnitClass [

	^ DRJITCompilationUnit 
]

{ #category : #'accessing - compiler' }
DRInterpreterCompiler >> compilerCompiler [
	"Answer a Druid compiler configured for the receiver's interpreter builder"

	^ compilerCompiler
		ifNil: [ compilerCompiler := self compilerCompilerClass forInterpreter: interpreter ]
]

{ #category : #'accessing - compiler' }
DRInterpreterCompiler >> compilerCompilerClass [

	^ compilerCompilerClass
		ifNil: [ compilerCompilerClass := self defaultCompilerCompilerClass ]
]

{ #category : #'accessing - compiler' }
DRInterpreterCompiler >> compilerCompilerClass: aClass [

	compilerCompilerClass := aClass
]

{ #category : #'accessing - compiler' }
DRInterpreterCompiler >> defaultCompilerCompilerClass [

	^ DRPrimitiveCompilerCompiler
]

{ #category : #accessing }
DRInterpreterCompiler >> defaultTargetSuperclass [

	^ StackToRegisterMappingCogit
]

{ #category : #'accessing - model' }
DRInterpreterCompiler >> generateBuildModelAndCompileIn: aClass [
	"Generate and install the receiver's primitives into JIT compiler aClass"

	self generateBuildModel
		interpreter: interpreter;
		targetClass: (self environmentAt: aClass);
		compileAll
]

{ #category : #'accessing - model' }
DRInterpreterCompiler >> generateBuildModelAndCompileIn: aClass superclass: aSuperclass [
	"Generate and install the receiver's primitives into JIT compiler aClass"

	self generateBuildModel
		interpreter: interpreter;
		targetSuperclass: (self environmentAt: aSuperclass);
		targetClass: (self environmentAt: aClass);
		compileAll
]

{ #category : #accessing }
DRInterpreterCompiler >> generateIRAndCompileIn: aClass [
	"Generate and install the receiver's primitives into JIT compiler aClass"

	self generateBuildModel
		interpreter: interpreter;
		targetClass: (self environmentAt: aClass);
		compileAll
]

{ #category : #helpers }
DRInterpreterCompiler >> initPrimitiveTable [
	"Answer a <Collection> with the JITed primitives"

	^ compilationUnit initPrimitiveTable
]

{ #category : #'accessing - object memory' }
DRInterpreterCompiler >> initializationOptions [

	^ {
		  #BytesPerWord.
		  8 .
		  #ObjectMemory.
		  memory class name}
]

{ #category : #initialization }
DRInterpreterCompiler >> initialize [

	super initialize.
	interpreter := self newInterpreter
]

{ #category : #accessing }
DRInterpreterCompiler >> interpreterBuilder [

	^ interpreterBuilder
]

{ #category : #accessing }
DRInterpreterCompiler >> interpreterBuilder: aClass [ 

	interpreterBuilder := aClass
]

{ #category : #accessing }
DRInterpreterCompiler >> interpreterPrimitiveTable [
	"Answer a <Collection> of <Symbol> each one representing a selector (e.g. #primitiveEqual) of the receiver's primitive table"

	^ interpreterBuilder primitiveTable
]

{ #category : #accessing }
DRInterpreterCompiler >> newInterpreter [

	memory := self newMemory.

	interpreterBuilder 
		initializeWithOptions: self initializationOptions
		objectMemoryClass: memory class.

	^ interpreterBuilder newInterpreter
			objectMemory: memory;
			yourself
		  " basicInitialize"
]

{ #category : #'accessing - object memory' }
DRInterpreterCompiler >> newMemory [
	" Answer a memory manager instance. Currently a subclass of <SpurMemoryManager> "

	^ Spur64BitCoMemoryManager simulatorClass new
]

{ #category : #accessing }
DRInterpreterCompiler >> newPrimitive: aString [
	" Answer a new primitive object with its metadata and CFG generated "

	^ DRPrimitiveObject new
		primitiveNumber: (self primitiveNumberOf: aString);
		sourceSelector: aString;
		cfg: (self compilerCompiler buildIR: aString);
		argumentCount: (self compilerCompiler numberOfArgumentsForSelector: aString);
		mayCallback: (self primitiveMayCallback: aString);
		yourself
]

{ #category : #accessing }
DRInterpreterCompiler >> primitiveMayCallback: aString [
	"Answer <true> if primitive aString is marked as maycallback"
	" #maycallback "

	^ aString = #genNonImplementedPrimitive
]

{ #category : #'accessing - primitives' }
DRInterpreterCompiler >> primitiveNumberOf: aSelector [
	" Answer a <Number> representing the primitive number of aSelector "

	| primNumber |

	primNumber := self interpreterPrimitiveTable indexOf: aSelector.
	^ self interpreterPrimitiveTable first = 0
		ifTrue: [ primNumber - 1 ]
		ifFalse: [ primNumber ]
]

{ #category : #'accessing - primitives' }
DRInterpreterCompiler >> primitiveTable [
	"Answer a <Collection> of primitive selectors"

	^ interpreter class basicPrimitiveTable
]

{ #category : #'class initialization' }
DRInterpreterCompiler >> primitiveTableArray [

	<generated>
	^ {
		  { 1. #gen_PrimitiveAdd. 1 }.
		  { 2. #gen_PrimitiveSubtract. 1 }.
		  { 3. #gen_PrimitiveLessThan. 1 }.
		  { 4. #gen_PrimitiveGreaterThan. 1 }.
		  { 5. #gen_PrimitiveLessOrEqual. 1 }.
		  { 6. #gen_PrimitiveGreaterOrEqual. 1 }.
		  { 7. #gen_PrimitiveEqual. 1 }.
		  { 8. #gen_PrimitiveNotEqual. 1 }.
		  { 9. #gen_PrimitiveMultiply. 1 }.
		  { 10. #gen_PrimitiveDivide. 1 }.
		  { 1. #gen_PrimitiveAdd. 1 }.
		  { 2. #gen_PrimitiveSubtract. 1 }.
		  { 3. #gen_PrimitiveLessThan. 1 }.
		  { 4. #gen_PrimitiveGreaterThan. 1 }.
		  { 5. #gen_PrimitiveLessOrEqual. 1 }.
		  { 6. #gen_PrimitiveGreaterOrEqual. 1 }.
		  { 7. #gen_PrimitiveEqual. 1 }.
		  { 8. #gen_PrimitiveNotEqual. 1 }.
		  { 9. #gen_PrimitiveMultiply. 1 }.
		  { 10. #gen_PrimitiveDivide. 1 } }
]

{ #category : #'accessing - primitives' }
DRInterpreterCompiler >> primitives [

	^ self generateBuildModel primitives
]
