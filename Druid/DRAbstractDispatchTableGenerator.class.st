"
Sibclasses accept a `DRCompilationUnit` as input (using `primitiveTableMethodFrom:`) and install methods in a JIT compiler class (using `installAllMethodsOn:`).

Methods starting with `build` answer Pharo Code Generator node instances, used to build the methods in the JIT compiler class.

"
Class {
	#name : 'DRAbstractDispatchTableGenerator',
	#superclass : 'Object',
	#instVars : [
		'primTableNode',
		'compilationUnit'
	],
	#category : 'Druid-CompilerBuilder',
	#package : 'Druid',
	#tag : 'CompilerBuilder'
}

{ #category : 'instance creation' }
DRAbstractDispatchTableGenerator class >> fromCompilationUnit: aDRCompilationUnit [
	"Answer a <DRCogitPrimitiveInstaller> method representation of aDRCompilationUnit"

	^ self new
		compilationUnit: aDRCompilationUnit;
		yourself
]

{ #category : 'adding' }
DRAbstractDispatchTableGenerator >> addGeneratedComment: aRBMethodNode [

	"TODO: Duplicated from DRGeneratorMethodBuilder >> #methodNode"

	aRBMethodNode comments:
		{ (RBComment with: (RBCommentToken value: self methodComment in: 1)) }
]

{ #category : 'accessing - building' }
DRAbstractDispatchTableGenerator >> arrayAccessorGlobalName [

	self subclassResponsibility
]

{ #category : 'accessing - building' }
DRAbstractDispatchTableGenerator >> buildInitializePrimitiveTableArrayMethodNode [

	primTableNode := RBMethodNode 
		selector: #primitiveTableArray
		body: self buildPrimitiveTableArrayNode asSequenceNode.
	^ primTableNode
]

{ #category : 'accessing - building' }
DRAbstractDispatchTableGenerator >> buildInitializePrimitiveTableAssignmentNode [

	self subclassResponsibility
]

{ #category : 'accessing - building' }
DRAbstractDispatchTableGenerator >> buildInitializePrimitiveTableIVarAssignmentNode [

	^ RBAssignmentNode
		  variable: (RBVariableNode named: self primitiveTableVariableName)
		  value: self buildPrimitiveTableInitialValueNode
]

{ #category : 'accessing' }
DRAbstractDispatchTableGenerator >> buildInitializePrimitiveTableMaxCompiledPrimitiveIndexNode [

	^ RBAssignmentNode
		  variable: (RBVariableNode named: self maxPrimitiveIndexGlobalName )
		  value: self maxCompiledPrimitives
]

{ #category : 'accessing - building' }
DRAbstractDispatchTableGenerator >> buildInitializePrimitiveTableMethodNode [
	"Answer a <PCGMethodNode> ready for installation in a JIT compiler class"

	^ RBMethodNode
		  selector: self initPrimitiveTableSelector
		  body: (RBSequenceNode statements: {
					   self buildInitializePrimitiveTableMaxCompiledPrimitiveIndexNode.
					   self buildInitializePrimitiveTableIVarAssignmentNode.
					   self buildInitializePrimitiveTableAssignmentNode.
					   RBReturnNode value: (RBVariableNode named: self primitiveTableVariableName) })
]

{ #category : 'accessing - building' }
DRAbstractDispatchTableGenerator >> buildPrimitiveTableArrayNode [

	^ RBReturnNode value: self primitiveTable asArray asLiteralNode
]

{ #category : 'accessing - primitives' }
DRAbstractDispatchTableGenerator >> buildPrimitiveTableVariableNode [

	^ #primitiveTable asPCGInstanceVariable
]

{ #category : 'accessing' }
DRAbstractDispatchTableGenerator >> compilationUnit [

	^ compilationUnit
]

{ #category : 'accessing' }
DRAbstractDispatchTableGenerator >> compilationUnit: anObject [

	compilationUnit := anObject
]

{ #category : 'accessing - building' }
DRAbstractDispatchTableGenerator >> initPrimitiveTableSelector [

	self subclassResponsibility
]

{ #category : 'accessing' }
DRAbstractDispatchTableGenerator >> maxCompiledPrimitives [
	"Answer the <Number> of compiled primitives in the receiver"

	"primTableNode is a method node with the following shape
	
	foo
	  ^ { { primID . primName ... } ... { primID . primName ... } }
	
	This method returns the primID of the last entry of the table
	"
	| arrayNode |
	arrayNode := self primTableNode statements last value.
	arrayNode contents ifEmpty: [ ^ 0 ].
	^ arrayNode contents last contents first
]

{ #category : 'accessing' }
DRAbstractDispatchTableGenerator >> maxPrimitiveIndexGlobalName [

	self subclassResponsibility
]

{ #category : 'accessing' }
DRAbstractDispatchTableGenerator >> methodComment [

	^ 'AutoGenerated by Druid'
]

{ #category : 'accessing' }
DRAbstractDispatchTableGenerator >> primTableNode [

	^ primTableNode
]

{ #category : 'initialization' }
DRAbstractDispatchTableGenerator >> primitiveTable [
	"Answer a <Collection> with primitive table entries"

	^ self compilationUnit primitiveTable
]

{ #category : 'accessing - primitives' }
DRAbstractDispatchTableGenerator >> primitiveTableVariableName [

	^ #primitiveTable
]
