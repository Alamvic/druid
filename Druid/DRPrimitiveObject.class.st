"
Represents a primitive object. A primitive consist of:

- An identifier, currently a `Number` accessed through `primitiveNumber`.
- A source selector, i.e., the interpreter selector which this primitive implements.
- A generated selector, i.e. the selector of the JITed version of the primitive.
- Its CFG generated by Druid.
"
Class {
	#name : #DRPrimitiveObject,
	#superclass : #Object,
	#instVars : [
		'sourceSelector',
		'argumentCount',
		'cfg',
		'primitiveNumber',
		'mayCallback',
		'supported'
	],
	#category : #'Druid-InterpreterBuilder'
}

{ #category : #accessing }
DRPrimitiveObject >> argumentCount [

	^ argumentCount
]

{ #category : #accessing }
DRPrimitiveObject >> argumentCount: anObject [

	argumentCount := anObject
]

{ #category : #accessing }
DRPrimitiveObject >> cfg [

	^ cfg
]

{ #category : #accessing }
DRPrimitiveObject >> cfg: aDRPrimitiveControlFlowGraph [ 

	cfg := aDRPrimitiveControlFlowGraph
]

{ #category : #accessing }
DRPrimitiveObject >> genSelector [
	" Answer a <Symbol> specifying the JITed selector of the interpreter's counterpart (interpreter) method"

	supported ifFalse: [ ^ #genNonImplementedPrimitive ].

	^ #gen_ , self sourceSelector
]

{ #category : #initialization }
DRPrimitiveObject >> initialize [

	super initialize.
	supported := true.
	mayCallback := false
]

{ #category : #accessing }
DRPrimitiveObject >> mayCallback [

	^ mayCallback
]

{ #category : #accessing }
DRPrimitiveObject >> mayCallback: anObject [

	mayCallback := anObject
]

{ #category : #accessing }
DRPrimitiveObject >> primitiveNumber [

	^ primitiveNumber
]

{ #category : #accessing }
DRPrimitiveObject >> primitiveNumber: anInteger [ 

	primitiveNumber := anInteger 
]

{ #category : #printing }
DRPrimitiveObject >> printOn: aStream [

	aStream
		<< $(
		<< self primitiveNumber asString;
		<< $);
		space;
		<< self sourceSelector

		
]

{ #category : #accessing }
DRPrimitiveObject >> sourceSelector [

	^ sourceSelector
]

{ #category : #accessing }
DRPrimitiveObject >> sourceSelector: anObject [

	sourceSelector := anObject
]

{ #category : #accessing }
DRPrimitiveObject >> supported [

	^ supported
]

{ #category : #accessing }
DRPrimitiveObject >> supported: anObject [

	supported := anObject
]
